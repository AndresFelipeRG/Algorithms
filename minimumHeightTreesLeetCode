import java.util.*;

class Solution {
    List<List<Integer>> graph ;
    
   
    
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if(n == 0) return new ArrayList<Integer>();
        if(n == 1) return new ArrayList<Integer>(Arrays.asList(0));
        List<List<Integer>> graph = new ArrayList<>();
        int [] degrees = new int[n];
        boolean [] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        
        for(int i = 0 ; i < n; i++){
            graph.add(new ArrayList<>());
        }
        
        Arrays.fill(visited, false);
        
        for(int [] edge: edges){
            
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
            degrees[edge[0]]++;
            degrees[edge[1]]++;
            
        }
        
        for(int i = 0; i< n;i++){
            if(degrees[i] == 1) queue.add(i);
        }
        List<Integer> ans = new ArrayList<>();
        while(!queue.isEmpty()){
            int size = queue.size();
            System.out.println((queue));
            ans = new ArrayList<>();
            for(int i = 0; i < size; i++){
                int node = queue.poll();
                ans.add(node);
                visited[node] = true;
                for(int neighbor: graph.get(node)){
                    
                    if(--degrees[neighbor] == 1 && !visited[neighbor]){
                        queue.offer(neighbor);
                    }
                }
                
            }
        }
        
        return ans;
    }
}
